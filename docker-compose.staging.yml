version: '3.8'

services:
  # PostgreSQL Database for staging
  postgres:
    image: postgres:16-alpine
    container_name: geulpi_postgres_staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Cache for staging
  redis:
    image: redis:7-alpine
    container_name: geulpi_redis_staging
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Frontend Service for staging
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: staging
    container_name: geulpi_frontend_staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./logs/frontend:/app/logs
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Backend Service for staging
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: staging
    container_name: geulpi_backend_staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      SERVICE_NAME: geulpi-backend
      SERVICE_VERSION: ${SERVICE_VERSION:-1.0.0-staging}
      PORT: 8080
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ML_SERVER_URL: http://ml-server:8000
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_FILE_ENABLED: 'true'
      LOG_FILE_PATH: /app/logs
      METRICS_ENABLED: 'true'
      METRICS_PORT: 9090
    ports:
      - "8080:8080"
      - "9090:9090" # Metrics port
    volumes:
      - ./logs/backend:/app/logs
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ML Server for staging
  ml-server:
    build:
      context: ./ml-server
      dockerfile: Dockerfile
      args:
        PYTHON_ENV: staging
    container_name: geulpi_ml_server_staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      SERVICE_NAME: geulpi-ml-server
      SERVICE_VERSION: ${SERVICE_VERSION:-1.0.0-staging}
      PORT: 8000
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      LOG_FILE_ENABLED: 'true'
      LOG_FILE_PATH: /app/logs
      METRICS_ENABLED: 'true'
      METRICS_PORT: 9091
    ports:
      - "8000:8000"
      - "9091:9091" # Metrics port
    volumes:
      - ./logs/ml-server:/app/logs
      - ./config:/app/config:ro
      - ml_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Prometheus for staging metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: geulpi_prometheus_staging
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    ports:
      - "9092:9090"
    volumes:
      - ./config/prometheus/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - backend
      - ml-server
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana for staging dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: geulpi_grafana_staging
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - geulpi-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  geulpi-network:
    driver: bridge
